AUDIT & PLAN D'ACTION - alexa_full_control V1
Date: 2025-10-15
Auteur: Proposition automatisée

But
-----
Fournir un plan d'action structuré et exécutable pour auditer, nettoyer et améliorer le projet "alexa_full_control" (hors dossier `dev/`). Le document contient la todo list priorisée et la méthode précise pour chaque tâche.

Conventions
-----------
- Toutes les actions s'exécutent à la racine du dépôt : C:\Users\weedm\Downloads\alexa_full_control
- Le dossier `dev/` est exclu des actions automatisées (conserve outils locaux)
- Les commandes PowerShell fournies sont prêtes à exécuter sur Windows PowerShell (v5.1+)

TODO LIST (résumée et priorisée)
--------------------------------
1) Nettoyage des artefacts Python (priorité: haute, effort: faible)
2) Centraliser et valider le logger & SharedIcons (priorité: haute, effort: faible)
3) Renforcer résilience HTTP (AlexaAuth) (priorité: haute, effort: moyen)
4) Ajouter pre-commit et CI (GitHub Actions) (priorité: moyenne, effort: moyen)
5) Étendre la suite de tests et doubles (FakeAuthClient) (priorité: moyenne, effort: moyen)
6) Remplacer prints non-doc par logger (priorité: basse, effort: moyen)
7) Typage & mypy (priorité: basse, effort: moyen/élevé)
8) Factoriser util HTTP et retry helper (priorité: moyenne, effort: moyen)
9) Documentation: INSTALLATION & DEVELOPERS (priorité: moyenne, effort: faible)
10) Sécurité & secrets audit (priorité: haute, effort: faible)
11) Scripts de maintenance dev (création dans `dev/` ou `scripts/`) (priorité: faible, effort: faible)
12) Refactoriser scripts d'installation (install/) (priorité: faible, effort: moyen)
13) Performance & profiling (priorité: faible, effort: moyen)
14) Accessibilité & i18n (priorité: faible, effort: faible)

Pour chaque tâche : méthode détaillée
-------------------------------------
1) Nettoyage des artefacts Python
   Objectif: supprimer caches et artefacts pour réduire bruit et faux positifs.
   Etapes:
     - Créer scripts:
       - `scripts/clean_build_artifacts.ps1` (PowerShell)
       - `scripts/clean_build_artifacts.sh` (Bash)
     - Contenu (PowerShell):
       Set-Location 'C:\Users\weedm\Downloads\alexa_full_control'
       $targets = @('__pycache__', '.pytest_cache', '.ruff_cache', '.mypy_cache', '.tox', 'build', 'dist', '.eggs', 'htmlcov')
       foreach ($name in $targets) {
         Get-ChildItem -Recurse -Force -Directory -Filter $name -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
       }
       Get-ChildItem -Recurse -Force -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -like '*egg-info' } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
       Get-ChildItem -Recurse -Force -File -Include *.pyc, *.pyo -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue
       Get-ChildItem -Recurse -Force -File -ErrorAction SilentlyContinue | Where-Object { $_.Name -like '.coverage*' -or $_.Name -ieq 'coverage.xml' } | Remove-Item -Force -ErrorAction SilentlyContinue
     - Exécuter le script et committer la suppression (si nécessaire).
     - Vérifier qu'on n'efface rien dans `dev/` (utiliser un paramètre `--include-dev` si besoin).

2) Centraliser et valider le logger & SharedIcons
   Objectif: vérifier que `utils/logger.py` est la source unique de log/icônes et supprimer doublons.
   Etapes:
     - Grep pour `install_logger.py`, icônes codées en dur (emojis non via SharedIcons).
     - Supprimer `utils/install_logger.py` si duplicata.
     - Lancer `python scripts/test_logging.py` (ou créer un test minimal) pour valider format et encodage UTF-8.
     - Documenter l'API (fonctions publiques et icônes) dans `docs/LOGGING.md`.

3) Renforcer résilience HTTP (AlexaAuth)
   Objectif: robustesse des requêtes réseau, retries et timeouts.
   Etapes:
     - Extraire création de session dans `alexa_auth/alexa_auth.py` méthode `create_session()`.
     - Monter `HTTPAdapter` avec `urllib3.util.retry.Retry` (configurable via `Config`).
     - Forcer timeouts par défaut sur get/post/put/delete (timeout param si fourni l'emporte).
     - Ajouter logs DEBUG pour méthode/URL/statut/latence.
     - Ecrire tests unitaires simulant réponses 429 et 500 (utiliser `requests-mock` ou monkeypatch).

4) Ajouter pre-commit et CI
   Objectif: maintenir la qualité automatiquement.
   Etapes:
     - Créer `.pre-commit-config.yaml` (black, isort, ruff, end-of-file-fixer).
     - Commit le fichier et demander aux contributeurs de l'installer.
     - Ajouter `.github/workflows/ci.yml` contenant jobs: lint (ruff/black/isort), tests (pytest). Utiliser matrix python: [3.8,3.9,3.10].

5) Étendre la suite de tests et doubles
   Objectif: couvrir les services critiques.
   Etapes:
     - Créer `tests/fakes.py` avec `FakeAuthClient` (session simple, csrf string, comportement minimal).
     - Ecrire `tests/test_music_library.py` vérifiant les payloads et la gestion d'erreur (mocker `requests.Response`).
     - Ecrire `tests/test_cache_service.py` couvrant set/get, TTL.
     - Ajouter tests au CI.

6) Remplacer prints non-doc par logger
   Objectif: uniformiser la sortie et permettre debugging centralisé.
   Etapes:
     - Grep pour `print(` dans le repo.
     - Catégoriser: scripts/doc (laisser), runtime CLI/library (remplacer par logger).
     - Remplacer progressivement et exécuter les tests.

7) Typage & mypy
   Objectif: réduire erreurs runtime et faciliter refactors.
   Etapes:
     - Ajouter config mypy (strict=False) et commencer par `utils/` et `services/`.
     - Corriger annotations (ex: AlexaAuth, AuthClient Protocol déjà ajouté).
     - Lancer mypy en CI (optionnel selon tolérance).

8) Factoriser util HTTP
   Objectif: DRY pour les appels réseau.
   Etapes:
     - Créer `utils/http.py` exposant `safe_request(session, method, url, **kwargs)`.
     - Implémenter retries, timeout par défaut, logging et métriques (temps).
     - Remplacer appels directes `session.get/post` par `safe_request` progressivement.

9) Documentation
   Objectif: faciliter setup et contribution.
   Etapes:
     - Mettre à jour `README.md` + `README.dev.md` avec étapes Windows: créer .venv, activer, installer deps, nodeenv.
     - Documenter commands utiles dans `docs/DEVELOPER_GUIDE.md`.

10) Sécurité & secrets
    Objectif: éviter fuite de cookies/token.
    Etapes:
      - Grep pour contenu ressemblant à tokens / refresh tokens et vérifier historique git.
      - Ajouter `security/SECURITY.md` et checklist avant commit.
      - Intégrer `safety` ou `pip-audit` dans CI.

11) Scripts maintenance dev
    Objectif: centraliser outils utiles.
    Etapes:
      - Créer `dev/dev_tools.ps1` et `dev/dev_tools.sh` contenant actions: cleanup, lint, tests, create venv.
      - Documenter usage.

12) Refactor install/
    Objectif: rendre l'installation idempotente et testable.
    Etapes:
      - Déplacer code d'installation dans `install/` (si pas déjà), factoriser fonctions, proposer mode `--dry-run`.

13) Performance & profiling
    Objectif: mesurer et optimiser.
    Etapes:
      - Ajouter script `scripts/profile.py`.
      - Profiler `sync_service` et `cache_service` pour trouver hotspots.

14) Accessibilité & i18n
    Objectif: rendre affichage robuste sur terminals non-utf8.
    Etapes:
      - Ajouter fallback ASCII pour icônes via `SharedIcons.get_fallback(icon)`.
      - Préparer po/gettext si besoin.

Plan d'intervention recommandé (ordre d'exécution)
-------------------------------------------------
Phase A (jours 0-1):
  - Nettoyage des artefacts (1)
  - Scripts maintenance dev (11)
  - Centralisation logger & vérification (2)
  - Sécurité rapide (10)
Phase B (jours 1-3):
  - Ajouter pre-commit + CI (4)
  - Tests de base + FakeAuth (5)
Phase C (jours 3-7):
  - Renforcer AlexaAuth + utils/http (3,8)
  - Remplacer prints runtime (6)
  - Typage progressif et mypy (7)
Phase D (suivi):
  - Documentation, performance, install refactor, i18n (9,12,13,14)

Livrables que je peux créer maintenant
-------------------------------------
- `docs/AUDIT_AND_ACTION_PLAN.txt` (ce fichier)
- `scripts/clean_build_artifacts.ps1` et `.sh`
- `dev/dev_tools.ps1` (avec options) : cleanup, lint, tests
- `.pre-commit-config.yaml` et `.github/workflows/ci.yml` (boilerplate)
- `tests/fakes.py` et 2 tests unitaires (MusicLibraryService + CacheService)

Souhaites-tu que je commence par (choisis une option):
A) créer et exécuter les scripts de nettoyage maintenant (faible risque)
B) ajouter pre-commit + CI (impact sur la qualité)
C) ajouter tests unitaires + FakeAuth (prépare la sécurité des refactors)
D) autre (précise)

Fin du plan.
