@startuml
title Install.py - Installation compl√®te (flow rigoureux et d√©taill√©)
skinparam defaultTextAlignment center
skinparam activity {
  BackgroundColor White
  BorderColor Black
  FontSize 11
}

start
:Logger.header("INSTALLATION ALEXA ADVANCED CONTROL", "üöÄ");

partition "1. V√©rification venv (Early Detection)" {
  if (running_in_project_venv(sys.executable, install_dir)?) then (OUI)
    if (args.uninstall?) then (OUI)
      :Logger.error("Le script a √©t√© lanc√© depuis le .venv du projet.");
      :Logger.info("Pour quitter le .venv et pouvoir d√©sinstaller, tapez:");
      if (platform.system() == "Windows") then (Windows)
        :Logger.info("PowerShell: deactivate");
        :Logger.info("CMD: deactivate");
      else (Linux/macOS)
        :Logger.info("Bash / Zsh: deactivate");
      endif
      :Logger.info("Ensuite relancez la d√©sinstallation depuis votre shell utilisateur:");
      :raise CLIError(2);
      stop
    else if (not args.dry_run?) then (OUI)
      :Logger.error("Le script est ex√©cut√© depuis le .venv du projet.");
      if (platform.system() == "Windows") then (Windows)
        :Logger.info("Vous √™tes dans l'environnement virtuel du projet (.venv). Pour sortir:");
        :Logger.info("PowerShell: deactivate");
        :Logger.info("CMD: deactivate");
      else (Linux/macOS)
        :Logger.info("Bash / Zsh: deactivate");
      endif
      :raise CLIError(2);
      stop
    endif
  endif
}

if (args.uninstall?) then (OUI - Mode d√©sinstallation)
  partition "2. D√âSINSTALLATION" {
    :Logger.header("D√âSINSTALLATION", "üóëÔ∏è");
    if (check_existing_installation()?) then (OUI)
      :Logger.warning("Installation existante d√©tect√©e");
      if (args.force?) then (NON)
        if (args.yes?) then (NON)
          :response = input("Voulez-vous nettoyer l'installation pr√©c√©dente? (o/N):");
          if (response in ["o", "oui", "yes", "y"]?) then (NON)
            :Logger.info("Installation annul√©e par l'utilisateur");
            :sys.exit(0);
            stop
          endif
        else (OUI)
          :Logger.info("Non-interactive: suppression confirm√©e");
        endif
      else (OUI)
        note right
          --force bypasse
          les prompts
        end note
      endif
      
      :Logger.progress("Nettoyage en cours");
      
      if ((.venv).exists()?) then (OUI)
        if (args.dry_run?) then (OUI)
          :Logger.info("[dry-run] Suppression simul√©e: .venv");
        else (NON)
          :shutil.rmtree(.venv, ignore_errors=True);
          :Logger.success("‚úì .venv supprim√©");
        endif
      endif
      
      if ((alexa_auth/nodejs/.nodeenv).exists()?) then (OUI)
        if (args.dry_run?) then (OUI)
          :Logger.info("[dry-run] Suppression simul√©e: nodeenv");
        else (NON)
          :shutil.rmtree(nodeenv_path, ignore_errors=True);
          :Logger.success("‚úì nodeenv supprim√©");
        endif
      endif
      
      :Remove cookies (cookie.txt, cookie-resultat.json);
      :Remove cache files (data/cache/*.json, *.json.gz);
      :Logger.success("Nettoyage termin√©");
      
      :show_uninstall_summary();
      stop
    else (NON)
      :Logger.info("Aucune installation trouv√©e");
      stop
    endif
  }

else (NON - Mode installation)
  partition "3. V√âRIFICATIONS SYST√àME" {
    :Logger.header("V√âRIFICATIONS SYST√àME", "üîç");
    :platform_info = SystemChecker.get_platform_info();
    :Logger.info(f"Syst√®me: {platform_info['system']} {platform_info['release']}");
    
    :Logger.step("V√©rification de Python");
    :python_ok, python_msg = SystemChecker.check_python_version();
    if (python_ok?) then (OUI)
      :Logger.success(python_msg);
    else (NON)
      :Logger.error(python_msg);
      :Logger.info("Installez Python depuis: https://python.org");
      :sys.exit(1);
      stop
    endif
    
    :Logger.step("V√©rification de pip");
    :pip_ok, pip_msg = SystemChecker.check_pip();
    if (pip_ok?) then (OUI)
      :Logger.success(pip_msg);
    else (NON)
      :Logger.error(pip_msg);
      :sys.exit(1);
      stop
    endif
    
    :Logger.step("V√©rification de l'espace disque");
    :disk_ok, disk_msg = SystemChecker.check_disk_space(install_dir);
    if (disk_ok?) then (OUI)
      :Logger.success(disk_msg);
    else (NON)
      :Logger.warning(disk_msg);
    endif
  }

  partition "4. NETTOYAGE PR√âALABLE (si existant)" {
    if (check_existing_installation()?) then (OUI)
      :cleanup_existing_installation();
      note right
        M√™me logique que d√©sinstallation:
        prompt si pas --force/--yes,
        dry-run si --dry-run
      end note
    endif
  }

  if (args.dry_run?) then (OUI)
    :Logger.info("[dry-run mode] Simulation seulement, aucune modification");
    :Afficher toutes les commandes qui seraient ex√©cut√©es;
    stop
  endif

  partition "5. ENVIRONNEMENT PYTHON" {
    :Logger.header("ENVIRONNEMENT PYTHON", "üêç");
    
    :Logger.step("Cr√©ation de l'environnement virtuel");
    :subprocess.run([sys.executable, "-m", "venv", str(venv_path)]);
    :Logger.success("Environnement virtuel cr√©√©");
    
    :Logger.step("Mise √† jour de pip");
    :venv_python = get_venv_python();
    :subprocess.run([str(venv_python), "-m", "pip", "install", "--upgrade", "pip"]);
    :Logger.success("pip mis √† jour");
  }

  partition "6. D√âPENDANCES PYTHON" {
    :Logger.header("D√âPENDANCES PYTHON", "üì¶");
    :Logger.step("Installation des packages Python");
    
    if (requirements.txt exists?) then (OUI)
      :Logger.info("Installation depuis requirements.txt");
      :subprocess.run([str(venv_pip), "install", "-r", str(requirements_file)]);
    else (NON)
      :Logger.info("requirements.txt non trouv√©, installation manuelle");
      repeat
        :for package in REQUIRED_PACKAGES;
        :subprocess.run([str(venv_pip), "install", package]);
      repeat while (more packages?) is (OUI)
      ->NON;
    endif
    
    :Logger.success("Packages Python install√©s");
  }

  partition "7. ENVIRONNEMENT NODE.JS" {
    :Logger.header("ENVIRONNEMENT NODE.JS", "üü¢");
    
    :Logger.step(f"Installation de Node.js v{NODE_VERSION}");
    :nodejs_dir = install_dir / "alexa_auth" / "nodejs";
    :nodejs_dir.mkdir(parents=True, exist_ok=True);
    
    :subprocess.run([str(venv_python), "-m", "nodeenv", 
    f"--node={NODE_VERSION}", "--prebuilt", ".nodeenv"], cwd=nodejs_dir);
    :Logger.success(f"Node.js v{NODE_VERSION} install√©");
    
    :Logger.step("Installation des packages npm");
    :node_path, npm_path = get_nodejs_paths();
    
    :result = subprocess.run([str(node_path), "--version"]);
    :Logger.success(f"Node.js {result.stdout.strip()} fonctionnel");
    
    repeat
      :for package in ["alexa-cookie2", "yargs"];
      :Logger.progress(f"Installation de {package}");
      :subprocess.run([str(npm_path), "install", package], cwd=nodejs_dir);
      :Logger.success(f"{package} install√©");
    repeat while (more packages?) is (OUI)
    ->NON;
  }

  partition "8. CONFIGURATION FINALE" {
    :Logger.header("CONFIGURATION FINALE", "‚öôÔ∏è");
    
    :data_dir = install_dir / "data";
    if (not data_dir.exists()?) then (OUI)
      :Logger.step("Cr√©ation du dossier data");
      :data_dir.mkdir(parents=True, exist_ok=True);
      :Logger.success("Dossier data cr√©√©");
    endif
    
    if (not args.skip_tests?) then (OUI)
      :Logger.step("Test de la configuration");
      
      :result = subprocess.run([str(venv_python), "-V"]);
      if (result success?) then (OUI)
        :version = result.stdout.strip() or result.stderr.strip();
        :Logger.success(f"Test Python r√©ussi ({version})");
      else (NON)
        :Logger.error("Test Python √©chou√©");
      endif
      
      :subprocess.run([str(node_path), "-e", "console.log('Node.js OK')"]);
      if (result success?) then (OUI)
        :Logger.success("Test Node.js r√©ussi");
      else (NON)
        :Logger.error("Test Node.js √©chou√©");
      endif
    else (NON)
      note right
        Tests saut√©s
        avec --skip-tests
      end note
    endif
  }

  partition "9. R√âSUM√â FINAL" {
    :Logger.header("INSTALLATION TERMIN√âE", "üéâ");
    :Logger.success("Environnement Python (.venv) cr√©√©");
    :Logger.success("D√©pendances du projet install√©es");
    :Logger.success(f"Node.js v{NODE_VERSION} install√© via nodeenv");
    
    :Logger.header("INSTRUCTIONS", "üìñ");
    :activate_lines, _ = get_venv_instructions();
    if (platform.system() == "Windows") then (Windows)
      :print("PowerShell (Windows):");
      :print("  .\\.venv\\Scripts\\Activate.ps1");
      :print("CMD (Windows):");
      :print("  .\\.venv\\Scripts\\activate.bat");
    else (Linux/macOS)
      :print("Bash (Linux/macOS/WSL):");
      :print("  source .venv/bin/activate");
    endif
  }
  
  stop
endif

stop
@enduml
