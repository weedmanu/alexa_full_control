"""
Gestionnaire de rappels Alexa.

Ce module fournit une interface thread-safe pour cr√©er, lister,
modifier et supprimer des rappels via l'API Alexa.
"""

import threading
import time
from datetime import datetime
from typing import Any, Dict, List, Optional

import requests
from loguru import logger

from core.circuit_breaker import CircuitBreaker
from core.state_machine import AlexaStateMachine, ConnectionState
from services.cache_service import CacheService


class ReminderManager:
    """
    Gestionnaire thread-safe de rappels Alexa.

    Cette classe permet de g√©rer les rappels sur les appareils Alexa
    de mani√®re s√©curis√©e avec protection contre les d√©faillances.

    Attributes:
        auth: Instance d'authentification Alexa
        config: Configuration de l'application
        state_machine: Machine √† √©tats pour la connexion
        breaker: Circuit breaker pour la r√©silience
        cache_service: Service de cache pour la persistance
        _lock: Verrou pour la thread-safety
        _reminders_cache: Cache m√©moire des rappels
        _cache_timestamp: Timestamp du dernier refresh du cache
        _cache_ttl: Dur√©e de vie du cache m√©moire (secondes)
    """

    def __init__(
        self,
        auth,
        config,
        state_machine: Optional[AlexaStateMachine] = None,
        cache_service: Optional[CacheService] = None,
    ):
        """
        Initialise le gestionnaire de rappels.

        Args:
            auth: Instance AlexaAuth avec session authentifi√©e
            config: Instance Config avec param√®tres
            state_machine: Machine √† √©tats optionnelle (cr√©√©e si None)
            cache_service: Service de cache optionnel (cr√©√© si None)
        """
        self.auth = auth
        self.config = config
        self.state_machine = state_machine or AlexaStateMachine()
        self.breaker = CircuitBreaker(failure_threshold=3, timeout=30, half_open_max_calls=1)
        self.cache_service = cache_service or CacheService()

        # Cache multi-niveaux pour les rappels
        self._reminders_cache: Optional[List[Dict[str, Any]]] = None
        self._cache_timestamp: float = 0.0
        self._cache_ttl: int = 60  # 1 minute pour le cache m√©moire
        self._lock = threading.RLock()

        logger.info("ReminderManager initialis√©")

    def _is_cache_valid(self) -> bool:
        """
        V√©rifie si le cache m√©moire est encore valide.

        Returns:
            True si le cache existe et n'a pas expir√©
        """
        if self._reminders_cache is None:
            return False

        age = time.time() - self._cache_timestamp
        is_valid = age < self._cache_ttl

        if not is_valid:
            logger.debug(f"Cache rappels expir√© (√¢ge: {age:.1f}s, TTL: {self._cache_ttl}s)")

        return is_valid

    def _check_connection(self) -> bool:
        """
        V√©rifie l'√©tat de la connexion.

        Returns:
            True si connect√©, False sinon
        """
        if not self.state_machine.can_execute_commands:
            logger.error(
                f"Impossible d'ex√©cuter la commande - √âtat: {self.state_machine.state.name}"
            )
            return False
        return True

    def create_reminder(self, device_serial: str, label: str, datetime_str: str) -> Optional[Dict]:
        """
        Cr√©e un nouveau rappel ponctuel sur un appareil Alexa.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil
            label: Texte du rappel
            datetime_str: Date et heure du rappel (format ISO 8601)

        Returns:
            Dictionnaire avec les d√©tails du rappel cr√©√©, None en cas d'erreur
        """
        with self._lock:
            if not self._check_connection():
                return None

            try:
                payload = {
                    "type": "Reminder",
                    "deviceSerialNumber": device_serial,
                    "label": label,
                    "createdDate": datetime.now().isoformat(),
                    "reminderTime": datetime_str,
                    "status": "ON",
                }

                logger.debug(f"Cr√©ation rappel: {payload}")

                response = self.breaker.call(
                    self.auth.session.post,
                    f"https://{self.config.alexa_domain}/api/notifications",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

                result = response.json()
                logger.success(f"Rappel cr√©√© pour {device_serial}")

                # Invalider le cache
                self._reminders_cache = None

                return result

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de la cr√©ation du rappel: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return None
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la cr√©ation du rappel: {e}")
                return None

    def create_recurring_reminder(
        self, device_serial: str, label: str, recurrence: str, time_str: str
    ) -> Optional[Dict]:
        """
        Cr√©e un nouveau rappel r√©current sur un appareil Alexa.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil
            label: Texte du rappel
            recurrence: Type de r√©currence (daily, weekly, monthly)
            time_str: Heure du rappel (format HH:MM)

        Returns:
            Dictionnaire avec les d√©tails du rappel cr√©√©, None en cas d'erreur
        """
        with self._lock:
            if not self._check_connection():
                return None

            try:
                # Convertir la r√©currence en format Alexa
                recurrence_mapping = {"daily": "DAILY", "weekly": "WEEKLY", "monthly": "MONTHLY"}
                alexa_recurrence = recurrence_mapping.get(recurrence.lower(), "DAILY")

                payload = {
                    "type": "Reminder",
                    "deviceSerialNumber": device_serial,
                    "label": label,
                    "createdDate": datetime.now().isoformat(),
                    "recurringTime": time_str,
                    "recurrence": alexa_recurrence,
                    "status": "ON",
                }

                logger.debug(f"Cr√©ation rappel r√©current: {payload}")

                response = self.breaker.call(
                    self.auth.session.post,
                    f"https://{self.config.alexa_domain}/api/notifications",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

                result = response.json()
                logger.success(f"Rappel r√©current cr√©√© pour {device_serial}")

                # Invalider le cache
                self._reminders_cache = None

                return result

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de la cr√©ation du rappel r√©current: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return None
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la cr√©ation du rappel r√©current: {e}")
                return None

    def get_reminders(self, device_serial: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        Liste tous les rappels.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil (optionnel, tous les appareils si None)

        Returns:
            Liste des rappels
        """
        with self._lock:
            if not self._check_connection():
                return []

            # Utiliser le cache si valide
            if self._is_cache_valid():
                logger.debug("üíæ Cache rappels valide, utilisation du cache m√©moire")
                cached_reminders = self._reminders_cache
            else:
                # Charger depuis le cache disque d'abord
                cached_data = self.cache_service.get("reminders")
                if cached_data and isinstance(cached_data, dict):
                    cached_reminders = cached_data.get("reminders", [])
                    logger.debug(f"üíæ Cache disque: {len(cached_reminders)} rappel(s)")
                else:
                    cached_reminders = None

                # Si pas de cache disque ou expir√©, rafra√Æchir depuis l'API
                if cached_reminders is None:
                        cached_reminders = self._refresh_reminders_cache()
                else:
                    self._reminders_cache = cached_reminders
                    self._cache_timestamp = time.time()

            # Filtrer par appareil si sp√©cifi√©
            if device_serial:
                reminders = [
                    r for r in cached_reminders if r.get("deviceSerialNumber") == device_serial
                ]
            else:
                reminders = cached_reminders

            return reminders

    def _refresh_reminders_cache(self) -> List[Dict[str, Any]]:
        """
        Rafra√Æchit le cache des rappels en effectuant un appel API.

        Les rappels sont r√©cup√©r√©s depuis /api/notifications et filtr√©s par type "Reminder".

        Returns:
            Liste des rappels ou liste vide en cas d'erreur
        """
        try:
            logger.debug("üåê R√©cup√©ration de tous les rappels depuis l'API notifications")

            response = self.breaker.call(
                self.auth.session.get,
                f"https://{self.config.alexa_domain}/api/notifications",
                headers={
                    "Content-Type": "application/json; charset=UTF-8",
                    "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                    "csrf": self.auth.csrf,
                },
                timeout=10,
            )
            response.raise_for_status()

            # G√©rer le cas o√π la r√©ponse est vide
            if not response.content.strip():
                logger.info("Aucun rappel trouv√© (r√©ponse vide)")
                reminders = []
            else:
                data = response.json()
                # Les rappels sont dans la liste des notifications
                notifications = data.get("notifications", [])

                # Filtrer pour ne garder que les rappels (type="Reminder")
                reminders = [
                    notification
                    for notification in notifications
                    if notification.get("type") == "Reminder"
                ]

            # Mise √† jour cache m√©moire (Niveau 1)
            self._reminders_cache = reminders
            self._cache_timestamp = time.time()

            # Mise √† jour cache disque (Niveau 2) - TTL 5min
            self.cache_service.set("reminders", {"reminders": reminders}, ttl_seconds=300)

            logger.info(
                f"‚úÖ {len(reminders)} rappel(s) r√©cup√©r√©(s) et mis en cache (m√©moire + disque)"
            )
            return reminders

        except ValueError as e:
            # Erreur de parsing JSON (r√©ponse vide ou malform√©e)
            logger.warning(f"R√©ponse JSON invalide pour les rappels: {e}")
            return []
        except requests.exceptions.RequestException as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des rappels: {e}")
            if self.breaker.state.name == "OPEN":
                self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
            return []
        except Exception as e:
            logger.error(f"Erreur inattendue lors de la r√©cup√©ration des rappels: {e}")
            return []

    def delete_reminder(self, reminder_id: str) -> bool:
        """
        Supprime un rappel existant.

        Args:
            reminder_id: ID du rappel √† supprimer

        Returns:
            True si succ√®s, False sinon
        """
        with self._lock:
            if not self._check_connection():
                return False

            try:
                response = self.breaker.call(
                    self.auth.session.delete,
                    f"https://{self.config.alexa_domain}/api/notifications/{reminder_id}",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    timeout=10,
                )
                response.raise_for_status()

                logger.success(f"Rappel {reminder_id} supprim√©")

                # Invalider le cache
                self._reminders_cache = None

                return True

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de la suppression du rappel: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return False
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la suppression du rappel: {e}")
                return False

    def complete_reminder(self, reminder_id: str) -> bool:
        """
        Marque un rappel comme compl√©t√©.

        Args:
            reminder_id: ID du rappel

        Returns:
            True si succ√®s, False sinon
        """
        with self._lock:
            if not self._check_connection():
                return False

            try:
                payload = {"status": "COMPLETED"}

                response = self.breaker.call(
                    self.auth.session.put,
                    f"https://{self.config.alexa_domain}/api/notifications/{reminder_id}",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

                logger.success(f"Rappel {reminder_id} marqu√© comme compl√©t√©")

                # Invalider le cache
                self._reminders_cache = None

                return True

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors du marquage du rappel comme compl√©t√©: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return False
            except Exception as e:
                logger.error(f"Erreur inattendue lors du marquage du rappel comme compl√©t√©: {e}")
                return False
