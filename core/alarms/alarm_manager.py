"""
Gestionnaire d'alarmes Alexa.

Ce module fournit une interface thread-safe pour cr√©er, lister,
modifier et supprimer des alarmes via l'API Alexa.
"""

import threading
import time
from typing import Any, Dict, List, Optional

import requests
from loguru import logger

from core.circuit_breaker import CircuitBreaker
from core.state_machine import AlexaStateMachine, ConnectionState
from services.cache_service import CacheService


class AlarmManager:
    """
    Gestionnaire thread-safe d'alarmes Alexa.

    Cette classe permet de g√©rer les alarmes sur les appareils Alexa
    de mani√®re s√©curis√©e avec protection contre les d√©faillances.

    Attributes:
        auth: Instance d'authentification Alexa
        config: Configuration de l'application
        state_machine: Machine √† √©tats pour la connexion
        breaker: Circuit breaker pour la r√©silience
        cache_service: Service de cache pour la persistance
        _lock: Verrou pour la thread-safety
        _alarms_cache: Cache m√©moire des alarmes
        _cache_timestamp: Timestamp du dernier refresh du cache
        _cache_ttl: Dur√©e de vie du cache m√©moire (secondes)
    """

    def __init__(
        self,
        auth,
        config,
        state_machine: Optional[AlexaStateMachine] = None,
        cache_service: Optional[CacheService] = None,
    ):
        """
        Initialise le gestionnaire d'alarmes.

        Args:
            auth: Instance AlexaAuth avec session authentifi√©e
            config: Instance Config avec param√®tres
            state_machine: Machine √† √©tats optionnelle (cr√©√©e si None)
            cache_service: Service de cache optionnel (cr√©√© si None)
        """
        self.auth = auth
        self.config = config
        self.state_machine = state_machine or AlexaStateMachine()
        self.breaker = CircuitBreaker(failure_threshold=3, timeout=30, half_open_max_calls=1)
        self.cache_service = cache_service or CacheService()

        # Cache multi-niveaux pour les alarmes
        self._alarms_cache: Optional[List[Dict[str, Any]]] = None
        self._cache_timestamp: float = 0.0
        self._cache_ttl: int = 60  # 1 minute pour le cache m√©moire
        self._lock = threading.RLock()

        logger.info("AlarmManager initialis√©")

    def _is_cache_valid(self) -> bool:
        """
        V√©rifie si le cache m√©moire est encore valide.

        Returns:
            True si le cache existe et n'a pas expir√©
        """
        if self._alarms_cache is None:
            return False

        age = time.time() - self._cache_timestamp
        is_valid = age < self._cache_ttl

        if not is_valid:
            logger.debug(f"Cache alarmes expir√© (√¢ge: {age:.1f}s, TTL: {self._cache_ttl}s)")

        return is_valid

    def _check_connection(self) -> bool:
        """
        V√©rifie l'√©tat de la connexion.

        Returns:
            True si connect√©, False sinon
        """
        if not self.state_machine.can_execute_commands:
            logger.error(
                f"Impossible d'ex√©cuter la commande - √âtat: {self.state_machine.state.name}"
            )
            return False
        return True

    def create_alarm(
        self,
        device_serial: str,
        device_type: str,
        alarm_time: str,
        repeat: str = "ONCE",
        label: str = "",
        sound: Optional[str] = None,
    ) -> Optional[Dict]:
        """
        Cr√©e une nouvelle alarme sur un appareil Alexa.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil
            device_type: Type d'appareil
            alarm_time: Heure de l'alarme (format ISO 8601)
            repeat: Pattern de r√©p√©tition (ONCE, DAILY, WEEKLY, etc.)
            label: √âtiquette de l'alarme
            sound: ID du son d'alarme (optionnel)

        Returns:
            Dictionnaire avec les d√©tails de l'alarme cr√©√©e, None en cas d'erreur
        """
        with self._lock:
            if not self._check_connection():
                return None

            try:
                # Construire explicitement le pattern pour que mypy inf√®re bien le type
                pattern: List[Dict[str, Any]] = [
                    {"type": "alarm", "time": alarm_time, "recurrence": repeat}
                ]

                if label:
                    pattern[0]["label"] = label

                if sound:
                    pattern[0]["sound"] = {"id": sound}

                payload: Dict[str, Any] = {
                    "deviceSerialNumber": device_serial,
                    "deviceType": device_type,
                    "pattern": pattern,
                }

                logger.debug(f"Cr√©ation alarme: {payload}")

                response = self.breaker.call(
                    self.auth.session.post,
                    f"https://{self.config.alexa_domain}/api/alarms",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

                result = response.json()
                logger.success(f"Alarme cr√©√©e pour {device_serial}")

                # Invalider le cache
                self._alarms_cache = None

                return result

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de la cr√©ation de l'alarme: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return None
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la cr√©ation de l'alarme: {e}")
                return None

    def list_alarms(self, device_serial: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        Liste toutes les alarmes actives.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil (optionnel, tous les appareils si None)

        Returns:
            Liste des alarmes
        """
        with self._lock:
            if not self._check_connection():
                return []

            # Utiliser le cache si valide
            # Toujours assurer que `cached_alarms` est une liste (pas None)
            cached_alarms: List[Dict[str, Any]] = []
            if self._is_cache_valid():
                logger.debug("üíæ Cache alarmes valide, utilisation du cache m√©moire")
                if self._alarms_cache is not None:
                    cached_alarms = self._alarms_cache
            else:
                # Charger depuis le cache disque d'abord
                cached_data = self.cache_service.get("alarms")
                if cached_data and isinstance(cached_data, dict):
                    cached_alarms = cached_data.get("alarms", [])
                    logger.debug(f"üíæ Cache disque: {len(cached_alarms)} alarme(s)")

                # Si pas de cache disque ou expir√©, rafra√Æchir depuis l'API
                if not cached_alarms:
                    cached_alarms = self._refresh_alarms_cache()
                else:
                    self._alarms_cache = cached_alarms
                    self._cache_timestamp = time.time()

            # Filtrer par appareil si sp√©cifi√©
            if device_serial:
                alarms = [a for a in cached_alarms if a.get("deviceSerialNumber") == device_serial]
            else:
                alarms = cached_alarms

            return alarms

    def _refresh_alarms_cache(self) -> List[Dict[str, Any]]:
        """
        Rafra√Æchit le cache des alarmes en effectuant un appel API.

        Les alarmes sont r√©cup√©r√©es depuis /api/notifications et filtr√©es par type "Alarm".

        Returns:
            Liste des alarmes ou liste vide en cas d'erreur
        """
        try:
            logger.debug("üåê R√©cup√©ration de toutes les alarmes depuis l'API notifications")

            response = self.breaker.call(
                self.auth.session.get,
                f"https://{self.config.alexa_domain}/api/notifications",
                headers={
                    "Content-Type": "application/json; charset=UTF-8",
                    "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                    "csrf": self.auth.csrf,
                },
                timeout=10,
            )
            response.raise_for_status()

            # G√©rer le cas o√π la r√©ponse est vide
            if not response.content.strip():
                logger.info("Aucune alarme trouv√©e (r√©ponse vide)")
                alarms = []
            else:
                data = response.json()
                # Les alarmes sont dans la liste des notifications
                notifications = data.get("notifications", [])

                # Filtrer pour ne garder que les alarmes (type="Alarm")
                alarms = [
                    notification
                    for notification in notifications
                    if notification.get("type") == "Alarm"
                ]

            # Mise √† jour cache m√©moire (Niveau 1)
            self._alarms_cache = alarms
            self._cache_timestamp = time.time()

            # Mise √† jour cache disque (Niveau 2) - TTL 5min
            self.cache_service.set("alarms", {"alarms": alarms}, ttl_seconds=300)

            logger.info(
                f"‚úÖ {len(alarms)} alarme(s) r√©cup√©r√©e(s) et mise(s) en cache (m√©moire + disque)"
            )
            return alarms

        except ValueError as e:
            # Erreur de parsing JSON (r√©ponse vide ou malform√©e)
            logger.warning(f"R√©ponse JSON invalide pour les alarmes: {e}")
            return []
        except requests.exceptions.RequestException as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des alarmes: {e}")
            if self.breaker.state.name == "OPEN":
                self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
            return []
        except Exception as e:
            logger.error(f"Erreur inattendue lors de la r√©cup√©ration des alarmes: {e}")
            return []

    def delete_alarm(self, device_serial: str, device_type: str, alarm_id: str) -> bool:
        """
        Supprime une alarme existante.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil
            device_type: Type d'appareil
            alarm_id: ID de l'alarme √† supprimer

        Returns:
            True si succ√®s, False sinon
        """
        with self._lock:
            if not self._check_connection():
                return False

            try:
                response = self.breaker.call(
                    self.auth.session.delete,
                    f"https://{self.config.alexa_domain}/api/alarms/{alarm_id}",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    timeout=10,
                )
                response.raise_for_status()

                logger.success(f"Alarme {alarm_id} supprim√©e")

                # Invalider le cache
                self._alarms_cache = None

                return True

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de la suppression de l'alarme: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return False
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la suppression de l'alarme: {e}")
                return False

    def update_alarm(self, device_serial: str, device_type: str, alarm_id: str, **updates) -> bool:
        """
        Modifie une alarme existante.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil
            device_type: Type d'appareil
            alarm_id: ID de l'alarme √† modifier
            updates: Dictionnaire des modifications (time, label, repeat, sound)

        Returns:
            True si succ√®s, False sinon
        """
        with self._lock:
            if not self._check_connection():
                return False

            try:
                payload = {}

                if "time" in updates:
                    payload["time"] = updates["time"]
                if "label" in updates:
                    payload["label"] = updates["label"]
                if "repeat" in updates:
                    payload["recurrence"] = updates["repeat"]
                if "sound" in updates:
                    payload["sound"] = {"id": updates["sound"]}

                if not payload:
                    logger.warning("Aucune modification sp√©cifi√©e pour l'alarme")
                    return False

                response = self.breaker.call(
                    self.auth.session.put,
                    f"https://{self.config.alexa_domain}/api/alarms/{alarm_id}",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

                logger.success(f"Alarme {alarm_id} modifi√©e")

                # Invalider le cache
                self._alarms_cache = None

                return True

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de la modification de l'alarme: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return False
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la modification de l'alarme: {e}")
                return False

    def set_alarm_enabled(
        self, device_serial: str, device_type: str, alarm_id: str, enabled: bool
    ) -> bool:
        """
        Active ou d√©sactive une alarme.

        Args:
            device_serial: Num√©ro de s√©rie de l'appareil
            device_type: Type d'appareil
            alarm_id: ID de l'alarme
            enabled: True pour activer, False pour d√©sactiver

        Returns:
            True si succ√®s, False sinon
        """
        with self._lock:
            if not self._check_connection():
                return False

            try:
                payload = {"enabled": enabled}

                response = self.breaker.call(
                    self.auth.session.put,
                    f"https://{self.config.alexa_domain}/api/alarms/{alarm_id}",
                    headers={
                        "Content-Type": "application/json; charset=UTF-8",
                        "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                        "csrf": self.auth.csrf,
                    },
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

                action = "activ√©e" if enabled else "d√©sactiv√©e"
                logger.success(f"Alarme {alarm_id} {action}")

                # Invalider le cache
                self._alarms_cache = None

                return True

            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur lors de l'activation/d√©sactivation de l'alarme: {e}")
                if self.breaker.state.name == "OPEN":
                    self.state_machine.transition_to(ConnectionState.CIRCUIT_OPEN)
                return False
            except Exception as e:
                logger.error(
                    f"Erreur inattendue lors de l'activation/d√©sactivation de l'alarme: {e}"
                )
                return False
