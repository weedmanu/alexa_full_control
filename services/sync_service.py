"""
Service de synchronisation pour r√©cup√©rer et mettre en cache toutes les donn√©es Alexa.

Ce service r√©cup√®re en une seule fois apr√®s l'authentification:
- Appareils Alexa (devices)
- Smart Home devices (lumi√®res, prises, thermostats, etc.)
- Routines
- Listes de courses/t√¢ches
- Playlists musicales
- Stations TuneIn favorites
- Contacts/groupes multiroom
- Rappels actifs
- Historique d'activit√© r√©cent

Auteur: M@nu
Date: 7 octobre 2025
"""

import time
from typing import Any, Dict, List, Optional

from utils.logger import get_logger

from services.cache_service import CacheService

logger = get_logger("sync_service")


class SyncService:
    """
    Service de synchronisation lazy des donn√©es Alexa.

    Charge uniquement les appareils au d√©marrage pour une r√©activit√© optimale.
    Les autres donn√©es (smart home, routines, listes, etc.) sont charg√©es
    √† la demande (lazy loading) quand elles sont n√©cessaires.

    Attributes:
        auth: Instance AlexaAuth
        config: Configuration
        cache_service: Service de cache
        state_machine: Machine √† √©tats
        _lazy_loaded: Dictionnaire des donn√©es d√©j√† charg√©es
    """

    def __init__(self, auth, config, state_machine, cache_service: Optional[CacheService] = None):
        """
        Initialise le service de synchronisation.

        Args:
            auth: AlexaAuth instance
            config: Config instance
            state_machine: AlexaStateMachine instance
            cache_service: CacheService (optionnel, cr√©√© si None)
        """
        self.auth = auth
        self.config = config
        self.state_machine = state_machine
        self.cache_service = cache_service or CacheService()

        # Statistiques de sync
        self.last_sync_time = 0.0
        self.sync_stats = {}

        # Suivi du chargement lazy
        self._lazy_loaded = {
            "devices": False,
            "smart_home": False,
            "alarms_and_reminders": False,
            "lists": False,
            "routines": False,
            "activities": False,
        }

        logger.info("Initialisation du SyncService (lazy loading activ√©)")
        logger.success("SyncService initialis√© (lazy loading activ√©)")

    def sync_devices_only(self, force: bool = False) -> Dict[str, Any]:
        """
        Synchronise uniquement les appareils Alexa au d√©marrage.

        Cette m√©thode est appel√©e au d√©marrage pour charger rapidement
        les appareils essentiels. Les autres donn√©es sont charg√©es
        √† la demande via les getters lazy.

        Args:
            force: Forcer la sync m√™me si cache valide

        Returns:
            Dict avec statistiques de synchronisation
        """
        if not self.state_machine.can_execute_commands:
            logger.warning("‚ö†Ô∏è  State machine non connect√©e, sync impossible")
            return {"success": False, "error": "not_connected"}

        start_time = time.time()
        stats = {
            "success": True,
            "timestamp": start_time,
            "synced": {},
            "failed": [],
        }

        logger.info("D√©marrage de la synchronisation des appareils (lazy loading)")
        logger.success("D√©marrage synchronisation des appareils (lazy loading)...")

        # 1. Devices Alexa uniquement
        try:
            devices = self._sync_alexa_devices()
            stats["synced"]["devices"] = len(devices)
            self._lazy_loaded["devices"] = True
            logger.success(f"{len(devices)} appareils Alexa synchronis√©s")
        except Exception as e:
            logger.error(f"‚ùå Erreur sync devices: {e}")
            stats["failed"].append({"category": "devices", "error": str(e)})

        # Sauvegarder les stats
        duration = time.time() - start_time
        stats["duration_seconds"] = round(duration, 2)
        self.last_sync_time = time.time()
        self.sync_stats = stats

        # Sauvegarder les stats dans le cache
        self.cache_service.set("sync_stats", stats, ttl_seconds=86400)  # 24h

        total_synced = sum(stats["synced"].values())
        logger.success(
            f"Synchronisation appareils termin√©e: {total_synced} √©l√©ments en {duration:.1f}s"
        )

        return stats

    def sync_all(self, force: bool = False) -> Dict[str, Any]:
        """
        Synchronise toutes les donn√©es Alexa (m√©thode legacy).

        Cette m√©thode est maintenue pour compatibilit√© mais utilise
        d√©sormais le chargement lazy. Elle force le chargement de
        toutes les donn√©es non encore charg√©es.

        Args:
            force: Forcer la sync m√™me si cache valide

        Returns:
            Dict avec statistiques de synchronisation
        """
        logger.info("üîÑ Synchronisation compl√®te demand√©e (lazy loading activ√©)...")

        # Forcer le chargement de toutes les donn√©es
        self.get_smart_home_devices(force=force)
        self.get_alarms_reminders(force=force)
        self.get_lists(force=force)
        self.get_routines(force=force)
        self.get_activities(force=force)

        # Retourner les stats globales
        return self.get_sync_stats()

    # ===== GETTERS LAZY =====

    def get_smart_home_devices(self, force: bool = False) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les smart home devices (lazy loading).

        Charge les donn√©es depuis le cache ou l'API si n√©cessaire.

        Args:
            force: Forcer le refresh depuis l'API

        Returns:
            Liste des smart home devices
        """
        if not force and self._lazy_loaded["smart_home"]:
            # R√©cup√©rer depuis le cache
            cached = self.cache_service.get("smart_home_all")
            if cached and "devices" in cached:
                return cached["devices"]

        # Charger depuis l'API
        try:
            devices = self._sync_smart_home_devices()
            self._lazy_loaded["smart_home"] = True
            logger.debug(f"Lazy loaded: {len(devices)} smart home devices")
            return devices
        except Exception as e:
            logger.error(f"Erreur lazy loading smart home: {e}")
            return []

    def get_alarms_reminders(self, force: bool = False) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les alarmes et rappels (lazy loading).

        Args:
            force: Forcer le refresh depuis l'API

        Returns:
            Liste des alarmes et rappels
        """
        if not force and self._lazy_loaded["alarms_and_reminders"]:
            cached = self.cache_service.get("alarms_and_reminders")
            if cached and "notifications" in cached:
                return cached["notifications"]

        try:
            notifications = self._sync_notifications()
            self._lazy_loaded["alarms_and_reminders"] = True
            logger.debug(f"Lazy loaded: {len(notifications)} alarmes et rappels")
            return notifications
        except Exception as e:
            logger.error(f"Erreur lazy loading alarmes et rappels: {e}")
            return []

    def get_lists(self, force: bool = False) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les listes (courses, t√¢ches) (lazy loading).

        Args:
            force: Forcer le refresh depuis l'API

        Returns:
            Liste des listes
        """
        if not force and self._lazy_loaded["lists"]:
            cached = self.cache_service.get("lists")
            if cached and "lists" in cached:
                return cached["lists"]

        try:
            lists = self._sync_lists()
            self._lazy_loaded["lists"] = True
            logger.debug(f"Lazy loaded: {len(lists)} listes")
            return lists
        except Exception as e:
            logger.error(f"Erreur lazy loading listes: {e}")
            return []

    def get_routines(self, force: bool = False) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les routines (lazy loading).

        Args:
            force: Forcer le refresh depuis l'API

        Returns:
            Liste des routines
        """
        if not force and self._lazy_loaded["routines"]:
            cached = self.cache_service.get("routines")
            if cached and "routines" in cached:
                return cached["routines"]

        try:
            routines = self._sync_routines()
            self._lazy_loaded["routines"] = True
            logger.debug(f"Lazy loaded: {len(routines)} routines")
            return routines
        except Exception as e:
            logger.error(f"Erreur lazy loading routines: {e}")
            return []

    def get_activities(self, force: bool = False, limit: int = 50) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les activit√©s r√©centes (lazy loading).

        Args:
            force: Forcer le refresh depuis l'API
            limit: Nombre maximum d'activit√©s √† r√©cup√©rer

        Returns:
            Liste des activit√©s
        """
        if not force and self._lazy_loaded["activities"]:
            cached = self.cache_service.get("activities")
            if cached and "activities" in cached:
                return cached["activities"]

        try:
            activities = self._sync_activities(limit)
            self._lazy_loaded["activities"] = True
            logger.debug(f"Lazy loaded: {len(activities)} activit√©s")
            return activities
        except Exception as e:
            logger.error(f"Erreur lazy loading activit√©s: {e}")
            return []

    def get_lazy_loading_status(self) -> Dict[str, bool]:
        """
        Retourne l'√©tat du chargement lazy pour chaque cat√©gorie.

        Returns:
            Dictionnaire avec l'√©tat de chargement pour chaque cat√©gorie
        """
        return self._lazy_loaded.copy()

    def preload_all_data(self, force: bool = False) -> Dict[str, Any]:
        """
        Pr√©charge toutes les donn√©es (√©quivalent √† l'ancienne sync_all).

        Utile pour les op√©rations qui n√©cessitent toutes les donn√©es.

        Args:
            force: Forcer le refresh de toutes les donn√©es

        Returns:
            Statistiques de pr√©chargement
        """
        logger.info("üîÑ Pr√©chargement de toutes les donn√©es...")

        start_time = time.time()
        stats = {
            "success": True,
            "timestamp": start_time,
            "preloaded": {},
            "failed": [],
        }

        # Pr√©charger toutes les cat√©gories
        categories = [
            ("smart_home", self.get_smart_home_devices),
            ("alarms_and_reminders", self.get_alarms_reminders),
            ("lists", self.get_lists),
            ("routines", self.get_routines),
            ("activities", self.get_activities),
        ]

        for category, getter in categories:
            try:
                data = getter(force=force)
                stats["preloaded"][category] = len(data)
                logger.debug(f"‚úÖ {len(data)} {category} pr√©charg√©s")
            except Exception as e:
                logger.error(f"‚ùå Erreur pr√©chargement {category}: {e}")
                stats["failed"].append({"category": category, "error": str(e)})

        duration = time.time() - start_time
        stats["duration_seconds"] = round(duration, 2)

        total_preloaded = sum(stats["preloaded"].values())
        logger.success(f"üéâ Pr√©chargement termin√©: {total_preloaded} √©l√©ments en {duration:.1f}s")

        return stats

    def _sync_alexa_devices(self) -> List[Dict[str, Any]]:
        """Synchronise les appareils Alexa."""
        try:
            response = self.auth.session.get(
                f"https://{self.config.alexa_domain}/api/devices-v2/device",
                headers={"csrf": self.auth.csrf},
                timeout=10,
            )
            response.raise_for_status()
            data = response.json()
            devices = data.get("devices", [])

            # Sauvegarder dans cache
            self.cache_service.set("devices", {"devices": devices}, ttl_seconds=3600)  # 1h

            return devices
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration devices Alexa: {e}")
            return []

    def _sync_smart_home_devices(self) -> List[Dict[str, Any]]:
        """Synchronise les smart home devices."""
        try:
            response = self.auth.session.get(
                f"https://{self.config.alexa_domain}/api/behaviors/entities?skillId=amzn1.ask.1p.smarthome",
                headers={
                    "Content-Type": "application/json; charset=UTF-8",
                    "Referer": f"https://alexa.{self.config.amazon_domain}/spa/index.html",
                    "Origin": f"https://alexa.{self.config.amazon_domain}",
                    "csrf": self.auth.csrf,
                },
                timeout=10,
            )
            response.raise_for_status()
            devices = response.json()

            # Sauvegarder UNIQUEMENT le fichier global
            # Le tri par cat√©gorie se fera √† la demande par les controllers
            self.cache_service.set(
                "smart_home_all", {"devices": devices}, ttl_seconds=1800
            )  # 30min

            return devices
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration smart home: {e}")
            return []

    def _sync_notifications(self) -> List[Dict[str, Any]]:
        """Synchronise les alarmes et rappels."""
        try:
            response = self.auth.session.get(
                f"https://{self.config.alexa_domain}/api/notifications",
                headers={"csrf": self.auth.csrf},
                timeout=10,
            )
            response.raise_for_status()
            data = response.json()
            notifications = data.get("notifications", [])

            # Sauvegarder dans cache
            self.cache_service.set(
                "alarms_and_reminders", {"notifications": notifications}, ttl_seconds=600
            )  # 10min

            return notifications
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration alarmes et rappels: {e}")
            return []

    def _sync_lists(self) -> List[Dict[str, Any]]:
        """
        Synchronise les listes (courses, t√¢ches).

        Note: L'endpoint /api/namedLists retourne 503 (Service Temporarily Unavailable).
        Cette m√©thode retourne une liste vide pour √©viter les erreurs.
        """
        logger.debug("Synchronisation listes: service temporairement indisponible (503), ignor√©")
        # L'endpoint /api/namedLists retourne 503, service temporairement indisponible
        # Retourner une liste vide pour √©viter l'erreur
        return []

    def _sync_routines(self) -> List[Dict[str, Any]]:
        """Synchronise les routines Alexa."""
        try:
            response = self.auth.session.get(
                f"https://{self.config.alexa_domain}/api/behaviors/v2/automations",
                headers={"csrf": self.auth.csrf},
                timeout=15,
            )
            response.raise_for_status()
            routines = response.json()

            # V√©rifier si c'est une liste ou un dict
            if isinstance(routines, dict):
                routines = routines.get("routines", [])
            elif not isinstance(routines, list):
                routines = []

            # Sauvegarder dans cache
            self.cache_service.set("routines", {"routines": routines}, ttl_seconds=3600)  # 1h

            return routines
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration routines: {e}")
            return []

    def _sync_activities(self, limit: int = 50) -> List[Dict[str, Any]]:
        """
        Synchronise les activit√©s r√©centes.

        Note: L'endpoint /api/activities semble ne plus √™tre disponible (404).
        Cette m√©thode retourne une liste vide pour √©viter les erreurs.
        """
        logger.debug("Synchronisation activit√©s: endpoint non disponible (404), ignor√©")
        # L'endpoint /api/activities retourne 404, probablement supprim√© par Amazon
        # Retourner une liste vide pour √©viter l'erreur
        return []

    def get_sync_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de la derni√®re sync."""
        return self.sync_stats

    def is_cache_valid(self, max_age_seconds: int = 3600) -> bool:
        """V√©rifie si le cache est encore valide."""
        if self.last_sync_time == 0:
            return False
        age = time.time() - self.last_sync_time
        return age < max_age_seconds
