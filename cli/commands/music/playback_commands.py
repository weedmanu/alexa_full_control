"""
Commandes de contr√¥le de lecture (playback) - Refactoris√©.

G√®re: play, pause, stop, control, shuffle, repeat

Chaque commande est une classe BaseCommand ind√©pendante int√©grant CommandAdapter pour DI.

Auteur: M@nu
Date: 16 octobre 2025
"""

import argparse
from typing import Any, Optional

from cli.base_command import BaseCommand
from cli.command_adapter import get_command_adapter


# ============================================================================
# PLAYBACK PLAY COMMAND
# ============================================================================


class PlaybackPlayCommand(BaseCommand):
    """Reprendre/d√©marrer la lecture musicale."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Reprendre la lecture."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            self.info(f"‚ñ∂Ô∏è  Reprise sur '{args.device}'...")

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.play(serial, device_type)

            if result:
                self.success("‚úÖ Lecture reprise")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur play")
            self.error(f"Erreur: {e}")
            return False


# ============================================================================
# PLAYBACK PAUSE COMMAND
# ============================================================================


class PlaybackPauseCommand(BaseCommand):
    """Mettre en pause la lecture musicale."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Mettre en pause la lecture."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            self.info(f"‚è∏Ô∏è  Pause sur '{args.device}'...")

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.pause(serial, device_type)

            if result:
                self.success("‚úÖ Lecture mise en pause")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur pause")
            self.error(f"Erreur: {e}")
            return False


# ============================================================================
# PLAYBACK NEXT COMMAND
# ============================================================================


class PlaybackNextCommand(BaseCommand):
    """Passer au morceau suivant."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Passer au morceau suivant."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            self.info(f"‚è≠Ô∏è  Morceau suivant sur '{args.device}'...")

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.next_track(serial, device_type)

            if result:
                self.success("‚úÖ Morceau suivant")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur next")
            self.error(f"Erreur: {e}")
            return False


# ============================================================================
# PLAYBACK PREVIOUS COMMAND
# ============================================================================


class PlaybackPreviousCommand(BaseCommand):
    """Revenir au morceau pr√©c√©dent."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Revenir au morceau pr√©c√©dent."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            self.info(f"‚èÆÔ∏è  Morceau pr√©c√©dent sur '{args.device}'...")

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.previous_track(serial, device_type)

            if result:
                self.success("‚úÖ Morceau pr√©c√©dent")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur previous")
            self.error(f"Erreur: {e}")
            return False


# ============================================================================
# PLAYBACK STOP COMMAND
# ============================================================================


class PlaybackStopCommand(BaseCommand):
    """Arr√™ter la lecture musicale."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Arr√™ter la lecture."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            self.info(f"‚èπÔ∏è  Arr√™t sur '{args.device}'...")

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.stop(serial, device_type)

            if result:
                self.success("‚úÖ Lecture arr√™t√©e")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur stop")
            self.error(f"Erreur: {e}")
            return False


# ============================================================================
# PLAYBACK SHUFFLE COMMAND
# ============================================================================


class PlaybackShuffleCommand(BaseCommand):
    """Contr√¥ler le mode al√©atoire."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Contr√¥ler le mode al√©atoire."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            enabled = args.mode in ["on", "enable"]
            mode_text = "activ√©" if enabled else "d√©sactiv√©"

            self.info(f"üîÄ Mode al√©atoire {mode_text} sur '{args.device}'...")

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.set_shuffle(serial, device_type, enabled)

            if result:
                self.success(f"‚úÖ Mode al√©atoire {mode_text}")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur shuffle")
            self.error(f"Erreur: {e}")
            return False


# ============================================================================
# PLAYBACK REPEAT COMMAND
# ============================================================================


class PlaybackRepeatCommand(BaseCommand):
    """Contr√¥ler le mode r√©p√©tition."""

    def __init__(self, context: Optional[Any] = None) -> None:
        """Initialise la commande."""
        super().__init__(context)
        self.playback_mgr: Optional[Any] = None
        self.adapter = get_command_adapter()

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        """Configure le parser (non utilis√© pour les commandes individuelles)."""
        pass

    def execute(self, args: argparse.Namespace) -> bool:
        """Contr√¥ler le mode r√©p√©tition."""
        try:
            device_info = self.get_device_serial_and_type(args.device)
            if not device_info:
                return False

            serial, device_type = device_info

            mode_text = {
                "off": "d√©sactiv√©",
                "one": "r√©p√©ter 1 morceau",
                "all": "r√©p√©ter tout",
            }

            self.info(
                f"üîÅ Mode r√©p√©tition: {mode_text.get(args.mode, args.mode)} sur '{args.device}'..."
            )

            if not self.playback_mgr:
                self.playback_mgr = self.adapter.get_manager("PlaybackManager")
                if not self.playback_mgr:
                    self.error("PlaybackManager non disponible")
                    return False

            result = self.playback_mgr.set_repeat(serial, device_type, args.mode.upper())

            if result:
                self.success(f"‚úÖ Mode r√©p√©tition: {mode_text.get(args.mode, args.mode)}")
                return True

            return False

        except Exception as e:
            self.logger.exception("Erreur repeat")
            self.error(f"Erreur: {e}")
            return False
