"""
Script de g√©n√©ration de diagrammes de cache avec PlantUML.

G√©n√®re des diagrammes de flux montrant le processus de cache multi-niveaux
pour la r√©cup√©ration de la liste des appareils Alexa.

Pr√©requis:
    Aucun (g√©n√®re des fichiers .puml lisibles en texte)

Usage:
    python scripts/generate_cache_plantuml.py

Sortie:
    docs/diagrams/*.puml
    
Pour g√©n√©rer les images:
    - Utiliser l'extension VS Code PlantUML
    - Ou: java -jar plantuml.jar docs/diagrams/*.puml
"""

from pathlib import Path


def generate_cache_flow_puml():
    """G√©n√®re le diagramme de flux du syst√®me de cache en PlantUML."""
    
    content = """@startuml cache_flow_diagram
!theme plain
skinparam backgroundColor white
skinparam defaultFontSize 12
skinparam rectangleFontSize 14
skinparam noteFontSize 11

title Syst√®me de Cache Multi-Niveaux - Device List

actor "Utilisateur" as user
participant "CLI\\nalexa device list" as cli #LightBlue
participant "DeviceManager\\nget_devices()" as dm #LightGreen
participant "Cache M√©moire\\n(RAM)\\nTTL: 5 min" as mem #Yellow
participant "CacheService\\nget(ignore_ttl=True)" as cs #Orange
participant "Cache Disque\\n(devices.json.gz)\\nTTL: ‚àû AUCUN" as disk #LightCoral
participant "Amazon API\\nalexa.amazon.com" as api #Red

== Sc√©nario 1: Cache M√©moire Valide ==
user -> cli: alexa device list
cli -> dm: get_devices()
dm -> mem: V√©rifier TTL
mem -> mem: ‚úÖ TTL < 5 min
note right: **‚ö° 1-2 ms**
mem --> dm: Liste de 8 appareils
dm --> cli: Retour
cli --> user: Affichage

== Sc√©nario 2: Cache M√©moire Expir√© ‚Üí Disque ==
user -> cli: alexa device list
cli -> dm: get_devices()
dm -> mem: V√©rifier TTL
mem -> mem: ‚ùå TTL > 5 min
dm -> cs: get("devices", ignore_ttl=True)
cs -> disk: Lire fichier
disk -> disk: ‚úÖ Fichier existe\\n(toujours valide)
note right: **üíæ 10-50 ms**\\nPas de v√©rification TTL
disk --> cs: Donn√©es d√©compress√©es
cs --> dm: Liste de 8 appareils
dm -> mem: Mise √† jour cache RAM
dm --> cli: Retour
cli --> user: Affichage

== Sc√©nario 3: Pas de Cache ‚Üí API ==
user -> cli: alexa device list
cli -> dm: get_devices()
dm -> mem: V√©rifier TTL
mem -> mem: ‚ùå Vide (premier d√©marrage)
dm -> cs: get("devices", ignore_ttl=True)
cs -> disk: Lire fichier
disk -> disk: ‚ùå Fichier absent
cs --> dm: None
dm -> api: GET /api/devices-v2/device
note right: **üåê 200-1000 ms**\\nR√©qu√™te HTTP
api --> dm: R√©ponse JSON
dm -> disk: Sauvegarder (gzip)
dm -> mem: Sauvegarder (RAM)
dm --> cli: Retour
cli --> user: Affichage

@enduml
"""
    
    output_dir = Path(__file__).parent.parent / "docs" / "diagrams"
    output_dir.mkdir(parents=True, exist_ok=True)
    
    output_file = output_dir / "cache_flow_diagram.puml"
    output_file.write_text(content, encoding="utf-8")
    
    print(f"‚úÖ Diagramme de flux g√©n√©r√©: {output_file}")
    return output_file


def generate_architecture_puml():
    """G√©n√®re le diagramme d'architecture en PlantUML."""
    
    content = """@startuml cache_architecture
!theme plain
skinparam backgroundColor white
skinparam componentStyle rectangle

title Architecture du Syst√®me de Cache

package "Client Layer" {
    [CLI Commands] as cli
}

package "Business Logic" {
    [DeviceManager\\ncache_ttl=300s] as dm
}

package "Cache Layer" {
    package "Niveau 1 - Volatile" {
        database "In-Memory Cache\\nDict[str, List]\\nTTL: 5 min" as mem #Yellow
    }
    
    package "Niveau 2 - Persistent" {
        [CacheService\\nignore_ttl=True] as cs
        database "Disk Cache\\nJSON.GZ files\\nTTL: ‚àû (pas de TTL)" as disk #LightCoral
    }
}

package "External API" {
    cloud "Amazon Alexa API" as api
}

cli --> dm : get_devices()
dm --> mem : V√©rifier cache m√©moire
dm --> cs : get(ignore_ttl=True)
cs --> disk : Lire fichier cache
dm --> api : Requ√™te HTTP si aucun cache
api --> dm : R√©ponse JSON
dm --> mem : Mise √† jour RAM
dm --> disk : Sauvegarde disque (via cs)

note right of mem
  **Cache chaud (hot cache)**
  - Latence: 1-2 ms
  - Dur√©e: 5 minutes
  - Thread-safe: threading.Lock
end note

note right of disk
  **Cache de secours (fallback)**
  - Latence: 10-50 ms
  - Dur√©e: ‚àû (toujours valide)
  - Format: JSON compress√© (gzip)
  - Taille: ~80% r√©duction
end note

note right of api
  **Dernier recours**
  - Latence: 200-1000 ms
  - N√©cessite authentification
  - Rate limiting possible
end note

@enduml
"""
    
    output_dir = Path(__file__).parent.parent / "docs" / "diagrams"
    output_dir.mkdir(parents=True, exist_ok=True)
    
    output_file = output_dir / "cache_architecture.puml"
    output_file.write_text(content, encoding="utf-8")
    
    print(f"‚úÖ Diagramme d'architecture g√©n√©r√©: {output_file}")
    return output_file


def generate_state_machine_puml():
    """G√©n√®re le diagramme de machine √† √©tats du cache."""
    
    content = """@startuml cache_state_machine
!theme plain
skinparam backgroundColor white

title Machine √† √âtats du Cache

[*] --> Empty : Premier d√©marrage

state Empty {
    Empty : Cache m√©moire: ‚àÖ
    Empty : Cache disque: ‚àÖ
}

state MemoryOnly {
    MemoryOnly : Cache m√©moire: ‚úÖ (< 5 min)
    MemoryOnly : Cache disque: ‚úÖ
}

state DiskOnly {
    DiskOnly : Cache m√©moire: ‚ùå (expir√©)
    DiskOnly : Cache disque: ‚úÖ (toujours valide)
}

state BothValid {
    BothValid : Cache m√©moire: ‚úÖ
    BothValid : Cache disque: ‚úÖ
}

Empty --> BothValid : API Call\\nSauvegarde m√©moire + disque
BothValid --> DiskOnly : Attendre > 5 min\\nExpiration m√©moire
DiskOnly --> BothValid : Lecture disque\\nRecharge m√©moire
BothValid --> BothValid : get_devices()\\nCache m√©moire valide\\n‚ö° 1-2 ms
DiskOnly --> DiskOnly : get_devices()\\nLecture disque\\nüíæ 10-50 ms
Empty --> Empty : get_devices()\\nAppel API\\nüåê 200-1000 ms

note right of BothValid
  **√âtat optimal**
  Performance maximale
  Pas d'I/O disque
  Pas de requ√™te r√©seau
end note

note right of DiskOnly
  **√âtat de secours**
  Apr√®s 5 min d'inactivit√©
  Lecture disque rapide
  Pas de requ√™te r√©seau
end note

note right of Empty
  **√âtat initial**
  Premier lancement
  N√©cessite API call
  Initialise les caches
end note

@enduml
"""
    
    output_dir = Path(__file__).parent.parent / "docs" / "diagrams"
    output_dir.mkdir(parents=True, exist_ok=True)
    
    output_file = output_dir / "cache_state_machine.puml"
    output_file.write_text(content, encoding="utf-8")
    
    print(f"‚úÖ Diagramme de machine √† √©tats g√©n√©r√©: {output_file}")
    return output_file


def generate_performance_comparison_puml():
    """G√©n√®re un diagramme de comparaison de performances."""
    
    content = """@startuml cache_performance
!theme plain
skinparam backgroundColor white

title Comparaison des Performances - Cache vs API

|Utilisateur|
start
:Ex√©cuter\\n**alexa device list**;

|Syst√®me|
if (Cache m√©moire valide?) then (Oui)
  #LightGreen:Lire cache RAM;
  note right
    **‚ö° ULTRA RAPIDE**
    Latence: 1-2 ms
    Probabilit√©: 80%
    (si < 5 min)
  end note
  |Utilisateur|
  #LightGreen:Afficher 8 appareils;
  stop
else (Non)
  if (Cache disque existe?) then (Oui)
    #Yellow:Lire fichier\\ndevices.json.gz;
    #Yellow:D√©compresser;
    #Yellow:Charger en m√©moire;
    note right
      **üíæ RAPIDE**
      Latence: 10-50 ms
      Probabilit√©: 19%
      (apr√®s expiration)
      **PAS DE TTL**
    end note
    |Utilisateur|
    #Yellow:Afficher 8 appareils;
    stop
  else (Non)
    #Red:Appel API Amazon;
    #Red:GET /api/devices-v2/device;
    #Red:Parser JSON;
    #Red:Sauvegarder disque;
    #Red:Sauvegarder m√©moire;
    note right
      **üåê LENT**
      Latence: 200-1000 ms
      Probabilit√©: 1%
      (premier lancement)
    end note
    |Utilisateur|
    #Red:Afficher 8 appareils;
    stop
  endif
endif

@enduml
"""
    
    output_dir = Path(__file__).parent.parent / "docs" / "diagrams"
    output_dir.mkdir(parents=True, exist_ok=True)
    
    output_file = output_dir / "cache_performance.puml"
    output_file.write_text(content, encoding="utf-8")
    
    print(f"‚úÖ Diagramme de performances g√©n√©r√©: {output_file}")
    return output_file


def generate_markdown_includes():
    """G√©n√®re les inclusions Markdown pour CACHE_SYSTEM.md"""
    
    markdown = """
## üìä Diagrammes

### Flux de Cache Multi-Niveaux

Le diagramme suivant illustre les trois sc√©narios possibles lors de la r√©cup√©ration de la liste des appareils :

```plantuml
@startuml
!include diagrams/cache_flow_diagram.puml
@enduml
```

![Cache Flow Diagram](diagrams/cache_flow_diagram.png)

### Architecture Globale

```plantuml
@startuml
!include diagrams/cache_architecture.puml
@enduml
```

![Cache Architecture](diagrams/cache_architecture.png)

### Machine √† √âtats

Le cache √©volue entre diff√©rents √©tats selon l'utilisation :

```plantuml
@startuml
!include diagrams/cache_state_machine.puml
@enduml
```

![Cache State Machine](diagrams/cache_state_machine.png)

### Comparaison de Performances

```plantuml
@startuml
!include diagrams/cache_performance.puml
@enduml
```

![Cache Performance](diagrams/cache_performance.png)

---

**Note:** Pour visualiser les diagrammes PlantUML :
- Dans VS Code: Installer l'extension `PlantUML` (jebbs.plantuml)
- En ligne: Copier le contenu .puml sur http://www.plantuml.com/plantuml/
- En local: `java -jar plantuml.jar docs/diagrams/*.puml`
"""
    
    output_dir = Path(__file__).parent.parent / "docs"
    output_file = output_dir / "CACHE_DIAGRAMS_INCLUDES.md"
    output_file.write_text(markdown, encoding="utf-8")
    
    print(f"\nüìù Inclusions Markdown g√©n√©r√©es: {output_file}")
    return output_file


if __name__ == "__main__":
    print("üé® G√©n√©ration des diagrammes PlantUML du syst√®me de cache...\n")
    
    try:
        files = [
            generate_cache_flow_puml(),
            generate_architecture_puml(),
            generate_state_machine_puml(),
            generate_performance_comparison_puml(),
        ]
        
        markdown_file = generate_markdown_includes()
        
        print("\n‚úÖ Tous les diagrammes PlantUML ont √©t√© g√©n√©r√©s avec succ√®s!")
        print(f"üìÅ Emplacement: docs/diagrams/")
        print(f"\nüìÑ Fichiers g√©n√©r√©s:")
        for f in files:
            print(f"   - {f.name}")
        
        print(f"\nüí° Pour visualiser les diagrammes:")
        print(f"   1. Installer l'extension VS Code 'PlantUML' (jebbs.plantuml)")
        print(f"   2. Ouvrir un fichier .puml")
        print(f"   3. Appuyer sur Alt+D pour pr√©visualiser")
        print(f"\nüìã Pour int√©grer dans CACHE_SYSTEM.md:")
        print(f"   Copier le contenu de: {markdown_file.name}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        raise
