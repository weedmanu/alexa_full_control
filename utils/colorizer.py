"""Syst√®me centralis√© de coloration ANSI pour la CLI.

Ce module centralise TOUTES les op√©rations de coloration m√©tier (business-logic),
garantissant une API uniforme pour formatage des sections d'aide.

Architecture claire:
- term.py       : Infrastructure ANSI brute (Colors, COLOR_KEY_MAP, span, should_colorize)
- colorizer.py  : API m√©tier (formatage de sections, lignes, exemples, etc.)

Tous les fichiers help_texts et command_parser utilisent UNIQUEMENT ce module.
"""

from typing import List, Optional

from utils.term import COLOR_KEY_MAP, Colors, should_colorize, span

# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# üé® API DE COLORATION M√âTIER
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ


def colorize(text: str, key: str) -> str:
    """Alias de span() pour coh√©rence avec l'API CLI.

    D√©l√®gue directement √† span() de term.py.
    """
    if not should_colorize(no_color=False):
        return text
    return span(text, key)


# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# üé® HELPERS DE FORMATAGE M√âTIER
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ


def colorize_section_separator(length: int = 100, key: str = "color_text_dim") -> str:
    """G√©n√®re une ligne de s√©paration color√©e.

    Args:
        length: Longueur de la ligne de s√©paration
        key: Cl√© s√©mantique pour la couleur (color_text_dim par d√©faut)

    Returns:
        Ligne de s√©paration color√©e.
    """
    separator = "‚îÅ" * length
    return colorize(separator, key)


def colorize_section_title(emoji: str, title: str, key: str = "color_usage") -> str:
    """G√©n√®re un titre de section standardis√© color√©.

    Args:
        emoji: Emoji pour le titre (ex: "üìñ", "‚ö°", "üí°")
        title: Titre de la section (ex: "Usage", "Actions disponibles")
        key: Cl√© s√©mantique pour la couleur

    Returns:
        Titre format√© et color√©.
    """
    title_colored = colorize(title + ":", key)
    return f"{emoji} {title_colored}"


def colorize_usage_line(
    category: str,
    action: Optional[str] = None,
    global_options: bool = True,
    action_options: bool = True,
) -> str:
    """G√©n√®re une ligne d'usage color√©e selon le sch√©ma standardis√©.

    Format: alexa [OPTIONS_GLOBALES] <CATEGORIE> [<ACTION>] [OPTIONS_ACTION]

    Args:
        category: Nom de la cat√©gorie (ex: "device")
        action: Nom de l'action si applicable (ex: "list")
        global_options: Afficher [OPTIONS_GLOBALES]
        action_options: Afficher [OPTIONS_ACTION]

    Returns:
        Ligne d'usage color√©e.
    """
    parts = [colorize("alexa", "color_text_dim")]

    if global_options:
        parts.append(f"[{colorize('OPTIONS_GLOBALES', 'color_action_options')}]")

    parts.append(colorize(category, "color_category"))

    if action:
        parts.append(colorize(action, "color_action"))

    if action_options:
        parts.append(f"[{colorize('OPTIONS_ACTION', 'color_action_options')}]")

    return " ".join(parts)


def colorize_action_line(
    action: str,
    description: str,
    align_column: int = 50,
    option_suffix: str = "",
) -> str:
    """Formate et colore une ligne d'action.

    Exemple output:
    ‚Ä¢ list                                              : Lister tous les appareils

    Args:
        action: Nom de l'action (ex: "list")
        description: Description de l'action
        align_column: Colonne d'alignement pour la description
        option_suffix: Suffixe optionnel (ex: " --refresh", " --filter")

    Returns:
        Ligne d'action format√©e et color√©e.
    """
    action_colored = colorize(action, "color_action")
    if option_suffix:
        option_colored = colorize(option_suffix, "color_action_options")
        action_part = action_colored + " " + option_colored
    else:
        action_part = action_colored

    description_colored = colorize(description, "color_text_dim")

    # Alignement : compl√©ter avec des espaces jusqu'√† align_column
    padding = max(0, align_column - len(action_part))
    return f"  ‚Ä¢ {action_part}{' ' * padding} : {description_colored}"


def colorize_category_line(
    category: str,
    description: str,
    align_column: int = 50,
    option_suffix: str = "",
) -> str:
    """Formate et colore une ligne de cat√©gorie (pour l'aide principale).

    Exemple output:
    ‚Ä¢ auth                                              : Authentification et gestion des tokens

    Args:
        category: Nom de la cat√©gorie (ex: "auth")
        description: Description de la cat√©gorie
        align_column: Colonne d'alignement pour la description
        option_suffix: Suffixe optionnel

    Returns:
        Ligne de cat√©gorie format√©e et color√©e.
    """
    category_colored = colorize(
        category, "color_category"
    )  # Utilise "color_category" (vert) au lieu de "action" (bleu)
    if option_suffix:
        option_colored = colorize(option_suffix, "color_action_options")
        category_part = category_colored + " " + option_colored
    else:
        category_part = category_colored

    description_colored = colorize(description, "color_text_dim")

    # Alignement : compl√©ter avec des espaces jusqu'√† align_column
    padding = max(0, align_column - len(category_part))
    return f"  ‚Ä¢ {category_part}{' ' * padding} : {description_colored}"


def colorize_option_line(
    flag: str,
    metavar: Optional[str] = None,
    description: str = "",
    align_column: int = 50,
) -> str:
    """Formate et colore une ligne d'option.

    Exemple output:
    -v, --verbose                                       : Mode verbeux

    Args:
        flag: Drapeau d'option (ex: "-v, --verbose")
        metavar: M√©tavariable si applicable (ex: "LEVEL")
        description: Description de l'option
        align_column: Colonne d'alignement pour la description

    Returns:
        Ligne d'option format√©e et color√©e.
    """
    flag_colored = colorize(flag, "color_action_options")

    if metavar:
        metavar_colored = colorize(metavar, "color_action")
        flag_part = f"{flag_colored} {metavar_colored}"
    else:
        flag_part = flag_colored

    description_colored = colorize(description, "color_text_dim")

    # Alignement
    padding = max(0, align_column - len(flag_part))
    return f"  {flag_part}{' ' * padding} : {description_colored}"


def colorize_example(command: str) -> str:
    """Formate et colore une ligne d'exemple de commande.

    Exemple output:
    alexa device list --refresh

    Args:
        command: Commande compl√®te (ex: "alexa device list --refresh")

    Returns:
        Commande format√©e avec coloration partielle.
    """
    # Remplacer les √©l√©ments connus avec leurs couleurs respectives
    result = command.replace("alexa", colorize("alexa", "color_text_dim"))

    # Colorer les cat√©gories (mots apr√®s "alexa" s'il y a un espace)
    # Ceci est simplifi√© : on pourrait parser plus sophistiqu√© au besoin
    for cat in [
        "device",
        "auth",
        "alarm",
        "music",
        "activity",
        "reminder",
        "routine",
        "calendar",
        "lists",
        "multiroom",
        "announcement",
        "dnd",
        "cache",
        "smarthome",
        "timers",
        "notification",
    ]:
        result = result.replace(f" {cat} ", f" {colorize(cat, 'color_category')} ")

    # Colorer les drapeaux (--...)
    import re

    result = re.sub(r"(--?\w+)", lambda m: colorize(m.group(1), "color_action_options"), result)

    return result


def colorize_bullet_list(
    items: List[str],
    key: str = "color_text_dim",
) -> str:
    """Colore une liste √† puces.

    Args:
        items: Liste de textes
        key: Cl√© s√©mantique pour la couleur

    Returns:
        Texte avec puces color√©es.
    """
    result: List[str] = []
    for item in items:
        item_colored = colorize(item, key)
        result.append(f"  ‚Ä¢ {item_colored}")
    return "\n".join(result)


def strip_colors(text: str) -> str:
    """Supprime tous les codes couleur ANSI d'un texte.

    Utile pour: tests, logs, exports sans couleur.

    Args:
        text: Texte avec codes ANSI

    Returns:
        Texte sans codes ANSI.
    """
    import re

    ansi_escape = re.compile(r"\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])")
    return ansi_escape.sub("", text)


# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# üèóÔ∏è G√âN√âRATEURS DE SECTIONS COMPL√àTES
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ


def generate_help_section(
    emoji: str,
    title: str,
    content_lines: List[str],
    title_key: str = "color_usage",
    separator_char: str = "‚îÅ",
    separator_length: int = 100,
) -> str:
    """G√©n√®re une section d'aide standardis√©e (s√©parateurs + titre + contenu).

    Args:
        emoji: Emoji pour le titre
        title: Titre de la section
        content_lines: Lignes de contenu (d√©j√† format√©es)
        title_key: Cl√© s√©mantique pour le titre
        separator_char: Caract√®re de s√©paration ("‚îÅ" ou "‚îÄ")
        separator_length: Longueur de la s√©paration

    Returns:
        Section compl√®te avec bordures.
    """
    separator_colored = colorize(separator_char * separator_length, "color_text_dim")
    title_colored = colorize_section_title(emoji, title, title_key)

    content = "\n".join(content_lines)

    return f"\n{separator_colored}\n{title_colored}\n{separator_colored}\n\n{content}"


# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# ‚ú® R√âEXPORTS (pour compatibilit√© avec code existant)
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

# R√©exporter les utilitaires de term.py pour acc√®s centralis√©
__all__ = [
    "colorize",
    "colorize_section_separator",
    "colorize_section_title",
    "colorize_usage_line",
    "colorize_action_line",
    "colorize_category_line",
    "colorize_option_line",
    "colorize_example",
    "colorize_bullet_list",
    "generate_help_section",
    "strip_colors",
    "COLOR_KEY_MAP",
    "Colors",
]
