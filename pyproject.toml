# ============================================================================
# BLACK - Formatage du code
# ============================================================================
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
  | alexa_auth/nodejs
  | node_modules
  | Dev
  | scripts
  | \.git
  | __pycache__
  | venv
  | \.venv
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | build
  | dist
  | \.tox
  | \.eggs
  | \*\.egg
)/
'''

# ============================================================================
# ISORT - Organisation des imports
# ============================================================================
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [
    ".git",
    "__pycache__",
    "venv",
    "alexa_auth/nodejs",
    "node_modules",
    "Dev",
    "scripts",
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg"
]

# ============================================================================
# PYLINT - Analyse de code avancée
# ============================================================================
[tool.pylint.main]
py-version = "3.8"
jobs = 0
fail-under = 10.0
ignore-paths = [
    "scripts",
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "node_modules",
    "Dev"
]

[tool.pylint.messages_control]
disable = [
    "duplicate-code",
    "fixme",
    "too-few-public-methods",
    "import-outside-toplevel",
    "broad-exception-caught",
]

[tool.pylint.format]
max-line-length = 120
max-module-lines = 1000

[tool.pylint.design]
max-args = 8
max-attributes = 15
max-branches = 15
max-locals = 20
max-statements = 60

# ============================================================================
# RUFF - Linter moderne
# ============================================================================
[tool.ruff]
line-length = 120
target-version = "py38"
exclude = [
    "scripts",
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg",
    "alexa_auth/nodejs",
    "node_modules",
    "Dev"
]

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "UP", "B", "C4", "SIM"]
# Activer E501 pour que Ruff applique la limite de 120 caractères

# ============================================================================
# COVERAGE - Couverture de code
# ============================================================================
[tool.coverage.run]
source = ["core", "utils", "api", "cli", "scripts"]
omit = ["*/tests/*", "*/__pycache__/*", "*/venv/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# ============================================================================
# FLAKE8 - Align flake8 with Black's formatting decisions
# ============================================================================
[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "alexa_auth/nodejs",
    "node_modules",
    "Dev",
    "build",
    "dist",
]


[tool.pytest.ini_options]
testpaths = ["Dev/pytests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers -ra"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "security: Security tests",
    "workflow: Workflow tests",
    "scenario: Real-world scenario tests",
]

[project]
name = "alexa_full_control"
version = "0.0.0"
readme = "README.md"
authors = [ { name = "weedmanu" } ]


[build-system]
requires = ["setuptools>=65.5.0", "wheel"]
build-backend = "setuptools.build_meta"

# Explicit setuptools package discovery for editable installs
[tool.setuptools.packages.find]
where = ["."]
include = [
    "cli",
    "core",
    "services",
    "config",
    "models",
    "install",
    "alexa_auth",
    "utils",
    "data",
    "logs",
]

[tool.setuptools]
py-modules = ["alexa"]

# ============================================================================
# MYPY - Vérification des types
# ============================================================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true
exclude = [
    "scripts",
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg",
    "alexa_auth/nodejs",
    "node_modules",
    "Dev"
]

# ============================================================================
# BANDIT - Analyse de sécurité
# ============================================================================
[tool.bandit]
exclude_dirs = [
    "scripts",
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg",
    "alexa_auth/nodejs",
    "node_modules",
    "Dev"
]
skips = ["B101", "B601"]

# ============================================================================
# PYDOCSTYLE - Style des docstrings
# ============================================================================
[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]
match-dir = "^(?!(\\.git|__pycache__|venv|\\.venv|\\.mypy_cache|\\.pytest_cache|\\.ruff_cache|build|dist|\\.tox|\\.eggs|alexa_auth/nodejs|node_modules|Dev)).*"
